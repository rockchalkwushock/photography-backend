webpackJsonp([0,4],{"./client/modules/photobooth/actions.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFromBackEnd=t.getCloudinaryData=void 0;var o=n("./node_modules/react-redux-toastr/lib/index.js"),r=n("./client/modules/photobooth/types.js"),a=n("./client/modules/photobooth/apiMethods.js");t.getCloudinaryData=function(e,t){return{type:r.CLOUDINARY_DATA,promise:(0,a.sendToBackEnd)(t),meta:{onFailure:function(){return o.toastr.warning("Failure!","Upload Failed!")},onSuccess:function(){return o.toastr.success("Success!","Successfully Uploaded!")}}}},t.getFromBackEnd=function(){return{type:r.DATABASE_IMAGES,promise:(0,a.fetchFromBackEnd)(),meta:{onFailure:function(){return o.toastr.warning("Failure!","Database Error.")}}}}},"./client/modules/photobooth/apiMethods.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.fetchFromBackEnd=t.sendToBackEnd=void 0;var r=n("./node_modules/axios/index.js"),a=o(r);t.sendToBackEnd=function(e){return a.default.post("/library",{result:e})},t.fetchFromBackEnd=function(){return a.default.get("/library")}},"./client/modules/photobooth/library/Library.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n("./node_modules/react/react.js"),c=o(i),s=n("./node_modules/semantic-ui-react/dist/es/index.js"),d=n("./client/commons/index.js"),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),l(t,[{key:"componentDidMount",value:function(){this.props.getFromBackEnd()}},{key:"render",value:function(){var e=this.props,t=e.photos,n=e.translate;if(!t.isFetched)return c.default.createElement(d.LoadingScreen,null);var o=t.server.reduce(function(e,t){var n=t._id,o=t.url;return o||e.push(c.default.createElement(s.Image,{key:n,size:"tiny"},c.default.createElement(s.Label,{content:"Image not found!",icon:"warning"}))),e.push(c.default.createElement(s.Image,{key:n,src:o})),e},[]);return c.default.createElement("div",{className:"library"},0===t.server.length?c.default.createElement("div",{className:"initial"},c.default.createElement("h1",null,n("no-img")),c.default.createElement("h1",null,n("upload-prompt"))):c.default.createElement("div",{className:"images"},c.default.createElement(s.Image.Group,{size:"tiny"},o)))}}]),t}(i.Component);f.propTypes={getFromBackEnd:i.PropTypes.func.isRequired,photos:i.PropTypes.object,translate:i.PropTypes.func},t.default=f},"./client/modules/photobooth/library/LibraryContainer.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react-redux/es/index.js"),a=n("./node_modules/react-redux-multilingual/lib/index.js"),u=n("./client/modules/photobooth/library/Library.js"),l=o(u),i=n("./client/modules/photobooth/actions.js"),c=function(e){var t=e.photo;return{photos:t}};t.default=(0,r.connect)(c,{getFromBackEnd:i.getFromBackEnd})((0,a.withTranslate)(l.default))},"./client/modules/photobooth/sidebar/Sidebar.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n("./node_modules/react/react.js"),c=o(i),s=n("./node_modules/semantic-ui-react/dist/es/index.js"),d=n("./client/modules/photobooth/library/LibraryContainer.js"),f=o(d),p=n("./client/utils/index.js"),m=function(e){function t(){var e,n,o,u;r(this,t);for(var l=arguments.length,i=Array(l),c=0;c<l;c++)i[c]=arguments[c];return n=o=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),o.state={visible:!0},u=n,a(o,u)}return u(t,e),l(t,[{key:"render",value:function(){var e=this.state.visible,t=this.props,n=t.getCloudinaryData,o=t.translate;return c.default.createElement("div",{className:"sidebar"},c.default.createElement(s.Sidebar.Pushable,{as:s.Segment},c.default.createElement(s.Sidebar,{as:s.Menu,width:"thin",icon:"labeled",visible:e,vertical:!0,inverted:!0},c.default.createElement(s.Menu.Item,{name:"upload"},c.default.createElement(s.Icon,{name:"cloud upload",onClick:function(){return(0,p.openWidget)(n)}}),o("upload")),c.default.createElement(s.Menu.Item,{name:"filter"},c.default.createElement(s.Icon,{name:"filter"}),o("filter")),c.default.createElement(s.Menu.Item,{name:"chat"},c.default.createElement(s.Icon,{name:"chat"}),o("chat")),c.default.createElement(s.Menu.Item,{name:"help"},c.default.createElement(s.Icon,{name:"help"}),o("help"))),c.default.createElement(s.Sidebar.Pusher,null,c.default.createElement(s.Segment,{basic:!0},c.default.createElement(f.default,null)))))}}]),t}(i.Component);s.Sidebar.propTypes={defaultVisible:i.PropTypes.bool,getCloudinaryData:i.PropTypes.func,translate:i.PropTypes.func,visible:i.PropTypes.bool},t.default=m},"./client/modules/photobooth/sidebar/SidebarContainer.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react-redux/es/index.js"),a=n("./node_modules/react-redux-multilingual/lib/index.js"),u=n("./client/modules/auth/wrapper/index.js"),l=n("./client/modules/photobooth/sidebar/Sidebar.js"),i=o(l),c=n("./client/modules/photobooth/actions.js");t.default=(0,r.connect)(null,{getCloudinaryData:c.getCloudinaryData})((0,u.UserIsAuthenticated)((0,a.withTranslate)(i.default)))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
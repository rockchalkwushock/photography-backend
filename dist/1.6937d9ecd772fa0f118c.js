webpackJsonp([1,6],{"./client/modules/auth/signup/Signup.js":function(e,t,l){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=l("./node_modules/react/react.js"),n=a(s),i=l("./node_modules/redux-form/es/index.js"),r=l("./node_modules/semantic-ui-react/dist/es/index.js"),d=l("./client/commons/index.js"),u=l("./client/modules/auth/signup/validate.js"),o=function(e){var t=e.handleSubmit,l=e.signupUser,a=e.translate,s=e.valid;return n.default.createElement("div",{className:"signup"},n.default.createElement(r.Grid,{centered:!0,columns:3,style:{height:"90vh"},verticalAlign:"middle"},n.default.createElement(r.Grid.Row,null,n.default.createElement(r.Grid.Column,null,n.default.createElement(r.Message,{attached:!0,header:a("welcome"),content:a("pass-prompt")}),n.default.createElement(r.Form,{className:"attached fluid segment",onSubmit:t(l)},n.default.createElement(r.Form.Field,null,n.default.createElement("label",{htmlFor:"email"},a("email")),n.default.createElement(i.Field,{icon:"mail",component:d.InputField,placeholder:"putinHeartsdonald@yandex.ru",name:"email",type:"email"})),n.default.createElement(r.Form.Field,null,n.default.createElement("label",{htmlFor:"password"},a("password")),n.default.createElement(i.Field,{icon:"lock",component:d.InputField,placeholder:"secretKGBpasswordHERE",name:"password",type:"password"})),n.default.createElement(r.Form.Field,null,n.default.createElement("label",{htmlFor:"confirmPassword"},a("confirm")),n.default.createElement(i.Field,{icon:"lock",component:d.InputField,placeholder:"secretKGBpasswordHERE",name:"confirmPassword",type:"password"})),n.default.createElement(r.Button,{primary:!0,disabled:!s,type:"submit"},a("signup")))))))};o.propTypes={handleSubmit:s.PropTypes.func.isRequired,signupUser:s.PropTypes.func.isRequired,translate:s.PropTypes.func,valid:s.PropTypes.bool.isRequired},t.default=(0,i.reduxForm)({form:"signup",validate:u.signupValidation})(o)},"./client/modules/auth/signup/SignupContainer.js":function(e,t,l){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=l("./node_modules/react-redux/es/index.js"),n=l("./node_modules/react-redux-multilingual/lib/index.js"),i=l("./client/modules/auth/wrapper/index.js"),r=l("./client/modules/auth/signup/Signup.js"),d=a(r),u=l("./client/modules/auth/actions.js");t.default=(0,s.connect)(null,{signupUser:u.signupUser})((0,i.VisibleOnlyIfNotUser)((0,n.withTranslate)(d.default)))},"./client/modules/auth/signup/validate.js":function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.signupValidation=function(e){var t={};return e.email?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(e.email)||(t.email="Invalid email address"):t.email="Email is Required",e.password?e.confirmPassword?e.password!==e.confirmPassword&&(t.confirmPassword="Confirm Password must match the password"):t.confirmPassword="Confirm Password is Required":t.password="Password is Required",t}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
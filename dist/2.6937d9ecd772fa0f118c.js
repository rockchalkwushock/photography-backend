webpackJsonp([2,6],{"./client/modules/auth/login/Login.js":function(e,l,t){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(l,"__esModule",{value:!0});var n=t("./node_modules/react/react.js"),i=a(n),d=t("./node_modules/redux-form/es/index.js"),o=t("./node_modules/semantic-ui-react/dist/es/index.js"),r=t("./client/commons/index.js"),s=t("./client/modules/auth/login/validate.js"),u=function(e){var l=e.handleSubmit,t=e.loginUser,a=e.translate,n=e.valid;return i.default.createElement("div",{className:"login"},i.default.createElement(o.Grid,{centered:!0,columns:3,style:{height:"90vh"},verticalAlign:"middle"},i.default.createElement(o.Grid.Row,null,i.default.createElement(o.Grid.Column,null,i.default.createElement(o.Message,{attached:!0,header:a("welcome"),content:a("login-prompt")}),i.default.createElement(o.Form,{className:"attached fluid segment",onSubmit:l(t)},i.default.createElement(o.Form.Field,null,i.default.createElement("label",{htmlFor:"email"},a("email")),i.default.createElement(d.Field,{icon:"mail",component:r.InputField,placeholder:"putinHeartsdonald@yandex.ru",name:"email",type:"email"})),i.default.createElement(o.Form.Field,null,i.default.createElement("label",{htmlFor:"password"},a("password")),i.default.createElement(d.Field,{icon:"lock",component:r.InputField,placeholder:"secretKGBpasswordHERE",name:"password",type:"password"})),i.default.createElement(o.Button,{disabled:!n,primary:!0,type:"submit"},a("login")))))))};u.propTypes={handleSubmit:n.PropTypes.func.isRequired,loginUser:n.PropTypes.func.isRequired,translate:n.PropTypes.func,valid:n.PropTypes.bool.isRequired},l.default=(0,d.reduxForm)({form:"login",validate:s.loginValidation})(u)},"./client/modules/auth/login/LoginContainer.js":function(e,l,t){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(l,"__esModule",{value:!0});var n=t("./node_modules/react-redux/es/index.js"),i=t("./node_modules/react-redux-multilingual/lib/index.js"),d=t("./client/modules/auth/wrapper/index.js"),o=t("./client/modules/auth/login/Login.js"),r=a(o),s=t("./client/modules/auth/actions.js");l.default=(0,n.connect)(null,{loginUser:s.loginUser})((0,d.VisibleOnlyIfNotUser)((0,i.withTranslate)(r.default)))},"./client/modules/auth/login/validate.js":function(e,l,t){"use strict";Object.defineProperty(l,"__esModule",{value:!0});l.loginValidation=function(e){var l={};return e.password||(l.password="Password is Required"),e.email?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(e.email)||(l.email="Invalid email address"):l.email="Email is Required",l}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,